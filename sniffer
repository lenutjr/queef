getgenv().Config = {}

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Booga Booga by LenutJR", HidePremium = false, SaveConfig = false, ConfigFolder = "OrionTest"})
local Tab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Combat = Window:MakeTab({
	Name = "Combat",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local ESP = Window:MakeTab({
	Name = "ESP",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Farm = Window:MakeTab({
	Name = "Autofarm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Pickup = Window:MakeTab({
	Name = "Pickup",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Misc = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Misc:AddButton({
	Name = "AntiAFK",
	Callback = function()
      	antiAFK()
  	end    
})

Misc:AddButton({
	Name = "Fullbright",
	Callback = function()
      	fullBright()
  	end    
})

Misc:AddButton({
	Name = "Void TP",
	Callback = function()
      	voidTP()
  	end    
})

Tab:AddToggle({
	Name = "Go Through Doors",
	Default = false,
	Callback = function(v)
		Config.fuckDoors = v
        spawn(fuckDoors)
	end    
})

Tab:AddToggle({
	Name = "See Through Big Ol' Huts",
	Default = false,
	Callback = function(v)
		Config.seeThroughHut = v
        spawn(seeThroughHut)
	end    
})

local Section = Tab:AddSection({
	Name = "LP"
})

Tab:AddButton({
	Name = "Water Walker and Speed",
	Callback = function()
      	waterWalker()
  	end    
})

Tab:AddSlider({
	Name = "Speed ^",
	Min = 16,
	Max = 20,
	Default = 16,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "",
	Callback = function(speed)
		selectedSpeed = speed
	end    
})

Tab:AddButton({
	Name = "Jump Power",
	Callback = function()
      	jumpPower()
  	end    
})

Tab:AddSlider({
	Name = "Jump Height ^",
	Min = 50,
	Max = 80,
	Default = 50,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "",
	Callback = function(power)
		selectedPower = power
	end    
})

Tab:AddToggle({
	Name = "Inf Jump",
	Default = false,
	Callback = function(v)
		Config.infJump = v
        spawn(infJump)
	end    
})

Farm:AddToggle({
	Name = "Auto Hit (Feather Bush)",
	Default = false,
	Callback = function(v)
		Config.featherBush = v
        spawn(featherBush)
	end    
})

Farm:AddToggle({
	Name = "Auto Hit (Ancient Tree)",
	Default = false,
	Callback = function(v)
		Config.ancientTree = v
        spawn(ancientTree)
	end    
})

local Section = Farm:AddSection({
	Name = "God"
})

local godsList = {}

for _, v in pairs(workspace.Resources:GetDescendants()) do
    if v.Name == "Totem" and v.Parent:IsA("Model") then
        table.insert(godsList, v.Parent.Name)
    end
end

godDropdown = {"None"}
for _, v in pairs(godsList) do
    table.insert(godDropdown, v)
end

local godDown = Farm:AddDropdown({
	Name = "Gods",
	Default = "None",
	Options = godDropdown,
	Callback = function(god)
		selectedGod = god
	end    
})

Farm:AddButton({
	Name = "Refresh God Dropdown",
	Callback = function()
      	loadGods()
  	end    
})

function loadGods()
    local godsList = {}

    for _, v in pairs(workspace.Resources:GetDescendants()) do
        if v.Name == "Totem" and v.Parent:IsA("Model") then
            table.insert(godsList, v.Parent.Name)
        end
    end

    godDropdown = {"None"}
    for _, v in pairs(godsList) do
        table.insert(godDropdown, v)
    end
    godDown:Refresh(godDropdown, true)
end

Farm:AddToggle({
	Name = "Auto Hit (Selected God)",
	Default = false,
	Callback = function(v)
		Config.godFarm = v
        spawn(godFarm)
	end    
})

Combat:AddToggle({
	Name = "Killaura",
	Default = false,
	Callback = function(v)
		Config.killAura = v
        spawn(killAura)
	end    
})

Combat:AddSlider({
	Name = "Killaura Range",
	Min = 5,
	Max = 20,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Studs",
	Callback = function(range)
		selectedRange = range
	end    
})

Combat:AddTextbox({
	Name = "Killaura Player Exclude",
	Default = "",
	TextDisappear = false,
	Callback = function(chosen)
		selectedOne = chosen
	end	  
})

Combat:AddToggle({
	Name = "Strafe/LookAt",
	Default = false,
	Callback = function(v)
		Config.lookAt = v
        spawn(lookAt)
	end    
})

Combat:AddSlider({
	Name = "Strafe Range",
	Min = 1,
	Max = 10,
	Default = 1,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Studs",
	Callback = function(distance)
		selectedDistance = distance
	end    
})

ESP:AddButton({
	Name = "ESP ('Q' Toggle)",
	Callback = function()
      	esp()
  	end    
})

Pickup:AddToggle({
	Name = "Auto Pickup (Essence)",
	Default = false,
	Callback = function(v)
		Config.APEssence = v
        spawn(APEssence)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Gold)",
	Default = false,
	Callback = function(v)
		Config.APGold = v
        spawn(APGold)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Crystal Chunk)",
	Default = false,
	Callback = function(v)
		Config.APCrystal = v
        spawn(APCrystal)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Magnetite)",
	Default = false,
	Callback = function(v)
		Config.APMag = v
        spawn(APMag)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Iron)",
	Default = false,
	Callback = function(v)
		Config.APIron = v
        spawn(APIron)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Steel)",
	Default = false,
	Callback = function(v)
		Config.APSteel = v
        spawn(APSteel)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Pink Diamond)",
	Default = false,
	Callback = function(v)
		Config.APPinkDiamond = v
        spawn(APPinkDiamond)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Emerald)",
	Default = false,
	Callback = function(v)
		Config.APEmerald = v
        spawn(APEmerald)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Void Shard)",
	Default = false,
	Callback = function(v)
		Config.APVoidShard = v
        spawn(APVoidShard)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Log)",
	Default = false,
	Callback = function(v)
		Config.APLog = v
        spawn(APLog)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Wood)",
	Default = false,
	Callback = function(v)
		Config.APWood = v
        spawn(APWood)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Leaves)",
	Default = false,
	Callback = function(v)
		Config.APLeaves = v
        spawn(APLeaves)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Spirit Key)",
	Default = false,
	Callback = function(v)
		Config.APSpiritKey = v
        spawn(APSpiritKey)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Bloodfruit)",
	Default = false,
	Callback = function(v)
		Config.APBlood = v
        spawn(APBlood)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Stone)",
	Default = false,
	Callback = function(v)
		Config.APStone = v
        spawn(APStone)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Coin)",
	Default = false,
	Callback = function(v)
		Config.APCoin = v
        spawn(APCoin)
	end    
})
Pickup:AddToggle({
	Name = "Auto Pickup (Berry)",
	Default = false,
	Callback = function(v)
		Config.APBerry = v
        spawn(APBerry)
	end    
})

Pickup:AddTextbox({
	Name = "Custom Auto Pickup (Case Sensitive)",
	Default = "",
	TextDisappear = false,
	Callback = function(pick)
		selectedPick = pick
	end	  
})

Pickup:AddToggle({
	Name = "Auto Pickup (*Custom*)",
	Default = false,
	Callback = function(v)
		Config.customAP = v
        spawn(customAP)
	end    
})

OrionLib:Init()

function antiAFK()
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
       vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
       wait(1)
       vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end

function fullBright()
	if not _G.FullBrightExecuted then

		_G.FullBrightEnabled = false
	
		_G.NormalLightingSettings = {
			Brightness = game:GetService("Lighting").Brightness,
			ClockTime = game:GetService("Lighting").ClockTime,
			FogEnd = game:GetService("Lighting").FogEnd,
			GlobalShadows = game:GetService("Lighting").GlobalShadows,
			Ambient = game:GetService("Lighting").Ambient
		}
	
		game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
			if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
				_G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
				if not _G.FullBrightEnabled then
					repeat
						wait()
					until _G.FullBrightEnabled
				end
				game:GetService("Lighting").Brightness = 1
			end
		end)
	
		game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
			if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
				_G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
				if not _G.FullBrightEnabled then
					repeat
						wait()
					until _G.FullBrightEnabled
				end
				game:GetService("Lighting").ClockTime = 12
			end
		end)
	
		game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
			if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
				_G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
				if not _G.FullBrightEnabled then
					repeat
						wait()
					until _G.FullBrightEnabled
				end
				game:GetService("Lighting").FogEnd = 786543
			end
		end)
	
		game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
			if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
				_G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
				if not _G.FullBrightEnabled then
					repeat
						wait()
					until _G.FullBrightEnabled
				end
				game:GetService("Lighting").GlobalShadows = false
			end
		end)
	
		game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
			if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
				_G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
				if not _G.FullBrightEnabled then
					repeat
						wait()
					until _G.FullBrightEnabled
				end
				game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
			end
		end)
	
		game:GetService("Lighting").Brightness = 1
		game:GetService("Lighting").ClockTime = 12
		game:GetService("Lighting").FogEnd = 786543
		game:GetService("Lighting").GlobalShadows = false
		game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
	
		local LatestValue = true
		spawn(function()
			repeat
				wait()
			until _G.FullBrightEnabled
			while wait() do
				if _G.FullBrightEnabled ~= LatestValue then
					if not _G.FullBrightEnabled then
						game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
						game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
						game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
						game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
						game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
					else
						game:GetService("Lighting").Brightness = 1
						game:GetService("Lighting").ClockTime = 12
						game:GetService("Lighting").FogEnd = 786543
						game:GetService("Lighting").GlobalShadows = false
						game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
					end
					LatestValue = not LatestValue
				end
			end
		end)
	end
	
	_G.FullBrightExecuted = true
	_G.FullBrightEnabled = not _G.FullBrightEnabled
end

function waterWalker()
	local newindex = getrawmetatable(game).__newindex;
	setreadonly(getrawmetatable(game),false);

	getrawmetatable(game).__newindex = function(t,i,v)
		if i=="WalkSpeed" and not checkcaller() then
			return newindex(t,i,selectedSpeed);
		end
		return newindex(t,i,v);
	end
end

function jumpPower()
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    
    local newIndex = mt.__newindex
    
    mt.__newindex = function(t,i,v)
        if i == "JumpPower" then
            return newIndex(t,i, selectedPower)
        end
        return newIndex(t,i,v)
    end    
end

function featherBush()
	while task.wait(0.1) and Config.featherBush do
		local playerPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
		local closestDistance = math.huge
		local Stump = nil
		local Leaves = nil
		for _, v in pairs(workspace.Resources:GetDescendants()) do
			if v.Name == "Leaves" and v.Parent.Name == "Feather Bush" then
				local distance = (v.Position - playerPos).Magnitude
				if distance < closestDistance and distance <= 20 then
					closestDistance = distance
					Stump = v.Parent:FindFirstChild("Stump")
					Leaves = v
				end
			end
		end
		if Leaves and Stump then
			game:GetService("ReplicatedStorage").Events.SwingTool:FireServer({Stump, Leaves})
		end
	end
end

function killAura()
    while task.wait() and Config.killAura do
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        
        local function getClosestPlayer()
            local closestPlayer
            local shortestDistance = math.huge
            
            if not localPlayer.Character or not localPlayer.Character.PrimaryPart then
                return nil
            end
            
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= localPlayer and player.Character and player.Character.PrimaryPart and player.Name ~= selectedOne then
                    local distance = (player.Character.PrimaryPart.Position - localPlayer.Character.PrimaryPart.Position).magnitude
                    
                    if distance < selectedRange and distance < shortestDistance then
                        closestPlayer = player
                        shortestDistance = distance
                    end
                end
            end
            
            return closestPlayer
        end
        
        local nearestPlayer = getClosestPlayer()
        
        if nearestPlayer and nearestPlayer.Character then
            local args = {{}}
            
            for _, v in pairs(nearestPlayer.Character:GetDescendants()) do
                if v:IsA("MeshPart") then
                    table.insert(args[1], v)
                end
            end
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
        end
    end
end

function APEssence()
	while task.wait() and Config.APEssence do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Essence" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APGold()
	while task.wait() and Config.APGold do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Gold" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APCrystal()
	while task.wait() and Config.APCrystal do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Crystal Chunk" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APMag()
	while task.wait() and Config.APMag do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Magnetite" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APIron()
	while task.wait() and Config.APIron do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Iron" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APSteel()
	while task.wait() and Config.APSteel do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Steel" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APPinkDiamond()
	while task.wait() and Config.APPinkDiamond do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Pink Diamond" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APEmerald()
	while task.wait() and Config.APEmerald do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Emerald" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APVoidShard()
	while task.wait() and Config.APVoidShard do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Void Shard" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APLog()
	while task.wait() and Config.APLog do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Log" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APWood()
	while task.wait() and Config.APWood do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Wood" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APLeaves()
	while task.wait() and Config.APLeaves do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Leaves" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APSpiritKey()
	while task.wait() and Config.APSpiritKey do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Spirit Key" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APBlood()
	while task.wait() and Config.APBlood do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Bloodfruit" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APStone()
	while task.wait() and Config.APStone do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Stone" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APCoin()
	while task.wait() and Config.APCoin do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Coin" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function APBerry()
	while task.wait() and Config.APBerry do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == "Berry" then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function customAP()
	while task.wait() and Config.customAP do
		local lp = game.Players.LocalPlayer
		local character = lp.Character
		if character then
    		local playerPosition = character.PrimaryPart.Position

			for _, v in pairs(workspace.Items:GetChildren()) do
				if v.Name == selectedPick then
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= 50 then
						game:GetService("ReplicatedStorage").Events.Pickup:FireServer(v)
					end
				end
			end
		end
	end
end

function godFarm()
    while task.wait() and Config.godFarm do
        game:GetService("ReplicatedStorage").Events.SwingTool:FireServer({[1] = game:GetService("Workspace").Resources[selectedGod].Totem})
    end
end

function ancientTree()
    while task.wait() and Config.ancientTree do
        game:GetService("ReplicatedStorage").Events.SwingTool:FireServer({[1] = game:GetService("Workspace").Resources["Ancient Tree"].Reference, [2] = game:GetService("Workspace").Resources["Ancient Tree"].Trunk})
    end
end

function fuckDoors()
    while task.wait() do
        for _, v in pairs(workspace.Deployables:GetDescendants()) do
            if v.Name == "Door" then
                if Config.fuckDoors then
                    v.CanCollide = false
                    v.Transparency = 0.4
                else
                    v.CanCollide = true
                    v.Transparency = 0
                end
            end
        end
    end
end

function seeThroughHut()
    while task.wait() do
        for _, v in pairs(workspace.Deployables:GetDescendants()) do
            if v.Name == "StructureWood" and v.Parent.Name == "Big Ol' Hut" then
                if Config.seeThroughHut then
                    v.Transparency = 0.4
                else
                    v.Transparency = 0
                end
            end
        end
    end
end

function esp()
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local UserInputService = game:GetService("UserInputService")
	local Camera = workspace.CurrentCamera
	
	local Typing = false
	
	_G.SendNotifications = false
	_G.DefaultSettings = false
	
	_G.TeamCheck = false
	
	_G.ESPVisible = true
	_G.TextColor = Color3.fromRGB(255, 80, 10)
	_G.TextSize = 14
	_G.Center = true
	_G.Outline = true
	_G.OutlineColor = Color3.fromRGB(0, 0, 0)
	_G.TextTransparency = 0.7
	_G.TextFont = Drawing.Fonts.UI
	
	_G.DisableKey = Enum.KeyCode.Q
	
	local function CreateESP()
		for _, v in next, Players:GetPlayers() do
			if v.Name ~= Players.LocalPlayer.Name then
				local ESP = Drawing.new("Text")
	
				RunService.RenderStepped:Connect(function()
					if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
						local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
	
						ESP.Size = _G.TextSize
						ESP.Center = _G.Center
						ESP.Outline = _G.Outline
						ESP.OutlineColor = _G.OutlineColor
						ESP.Color = _G.TextColor
						ESP.Transparency = _G.TextTransparency
						ESP.Font = _G.TextFont
	
						if OnScreen == true then
							local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
							local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
							local Dist = (Part1 - Part2).Magnitude
							ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
							ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
							if _G.TeamCheck == true then 
								if Players.LocalPlayer.Team ~= v.Team then
									ESP.Visible = _G.ESPVisible
								else
									ESP.Visible = false
								end
							else
								ESP.Visible = _G.ESPVisible
							end
						else
							ESP.Visible = false
						end
					else
						ESP.Visible = false
					end
				end)
	
				Players.PlayerRemoving:Connect(function()
					ESP.Visible = false
				end)
			end
		end
	
		Players.PlayerAdded:Connect(function(Player)
			Player.CharacterAdded:Connect(function(v)
				if v.Name ~= Players.LocalPlayer.Name then 
					local ESP = Drawing.new("Text")
		
					RunService.RenderStepped:Connect(function()
						if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
							local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
		
							ESP.Size = _G.TextSize
							ESP.Center = _G.Center
							ESP.Outline = _G.Outline
							ESP.OutlineColor = _G.OutlineColor
							ESP.Color = _G.TextColor
							ESP.Transparency = _G.TextTransparency
		
							if OnScreen == true then
								local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
							local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
								local Dist = (Part1 - Part2).Magnitude
								ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
								ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
								if _G.TeamCheck == true then 
									if Players.LocalPlayer.Team ~= Player.Team then
										ESP.Visible = _G.ESPVisible
									else
										ESP.Visible = false
									end
								else
									ESP.Visible = _G.ESPVisible
								end
							else
								ESP.Visible = false
							end
						else
							ESP.Visible = false
						end
					end)
		
					Players.PlayerRemoving:Connect(function()
						ESP.Visible = false
					end)
				end
			end)
		end)
	end
	
	if _G.DefaultSettings == true then
		_G.TeamCheck = false
		_G.ESPVisible = true
		_G.TextColor = Color3.fromRGB(40, 90, 255)
		_G.TextSize = 14
		_G.Center = true
		_G.Outline = false
		_G.OutlineColor = Color3.fromRGB(0, 0, 0)
		_G.DisableKey = Enum.KeyCode.Q
		_G.TextTransparency = 0.75
	end
	
	UserInputService.TextBoxFocused:Connect(function()
		Typing = true
	end)
	
	UserInputService.TextBoxFocusReleased:Connect(function()
		Typing = false
	end)
	
	UserInputService.InputBegan:Connect(function(Input)
		if Input.KeyCode == _G.DisableKey and Typing == false then
			_G.ESPVisible = not _G.ESPVisible
			
			if _G.SendNotifications == true then
				game:GetService("StarterGui"):SetCore("SendNotification",{
					Title = "Exunys Developer";
					Text = "The ESP's visibility is now set to "..tostring(_G.ESPVisible)..".";
					Duration = 5;
				})
			end
		end
	end)
	
	local Success, Errored = pcall(function()
		CreateESP()
	end)
	
	if Success and not Errored then
		if _G.SendNotifications == true then
			game:GetService("StarterGui"):SetCore("SendNotification",{
				Title = "Exunys Developer";
				Text = "ESP script has successfully loaded.";
				Duration = 5;
			})
		end
	elseif Errored and not Success then
		if _G.SendNotifications == true then
			game:GetService("StarterGui"):SetCore("SendNotification",{
				Title = "Exunys Developer";
				Text = "ESP script has errored while loading, please check the developer console! (F9)";
				Duration = 5;
			})
		end
		TestService:Message("The ESP script has errored, please notify Exunys with the following information :")
		warn(Errored)
		print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
	end
end

function lookAt()
    local players = game:GetService("Players")
    local lp = players.LocalPlayer
    
    while task.wait() and Config.lookAt do
        local torso = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        
        if not torso then
            continue
        end

        local closestDistance = selectedDistance
        local closestPlayer = nil

        for _, player in pairs(players:GetPlayers()) do
            if player ~= lp and player.Name ~= selectedOne then
                local otherTorso = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                
                if otherTorso then
                    local distance = (torso.Position - otherTorso.Position).Magnitude
                    
                    if distance <= closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
        
        if closestPlayer then
            local targetTorso = closestPlayer.Character:FindFirstChild("HumanoidRootPart")
            
            if targetTorso then
                local lookAt = (targetTorso.Position - torso.Position).unit
                torso.CFrame = CFrame.new(torso.Position, torso.Position + lookAt * Vector3.new(1, 0, 1))
            end
        end
    end
end

function infJump()
    local InfiniteJump = false
    
    game:GetService("UserInputService").JumpRequest:Connect(function()
        if Config.infJump and InfiniteJump then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
        end
    end)
    
    if Config.infJump then
        InfiniteJump = not InfiniteJump
    end
end

function voidTP()
	game:GetService("TeleportService"):Teleport(11879754496)
end

function setFPS()
    setfps(144)
end

setFPS()
